class IDBHelper{static get dbPromise(){return idb.open("restaurants-db",1)}static databaseExists(e,t){var a=indexedDB.open(e),s=!0;a.onsuccess=function(){a.result.close(),s||indexedDB.deleteDatabase(e),t(s)},a.onupgradeneeded=function(){s=!1}}static deleteOldDatabase(){let e=window.indexedDB.deleteDatabase("restaurants-db");e.onerror=function(){console.log("Error deleting database.")},e.onsuccess=function(){console.log("Old database successfully deleted!")}}static createNewDatabase(){idb.open("restaurants-db",1,function(e){e.objectStoreNames.contains("restaurants")||e.createObjectStore("restaurants",{keypath:"id",autoIncrement:!0}),console.log("restaurants-db has been created!")})}static populateDatabase(e){fetch(DBHelper.DATABASE_URL).then(e=>e.json()).then(t=>{t.map(t=>IDBHelper.populateRestaurantsWithReviews(t,e))})}static populateRestaurantsWithReviews(e,t){let a=e.id;fetch(`http://localhost:1337/reviews/?restaurant_id=${a}`).then(e=>e.json()).then(a=>t.then(t=>{const s=t.transaction("restaurants","readwrite"),r=s.objectStore("restaurants");let n=e;n.reviews=a,r.put(n),s.complete}))}static insertEachTransaction(e,t){t.then(t=>{let a=t.transaction("restaurants","readwrite");return a.objectStore("restaurants").add(e),a.complete}),console.log("item has been inserted"),IDBHelper.populateReviews(e.id,t)}static readAllIdbData(e){return e.then(e=>e.transaction("restaurants").objectStore("restaurants").getAll())}static idbToggleFavorite(e,t){IDBHelper.dbPromise.then(async a=>{const s=a.transaction("restaurants","readwrite"),r=s.objectStore("restaurants");let n=await r.get(e)||0;return n.is_favorite=String(t),r.put(n,e),s.complete})}static idbPostReview(e,t){let a=parseInt(e);IDBHelper.dbPromise.then(async e=>{const s=e.transaction("restaurants","readwrite"),r=s.objectStore("restaurants");let n=await r.get(a);return n.reviews.push(t),r.put(n,a),s.complete})}static syncOfflineReviews(){IDBHelper.readAllIdbData(IDBHelper.dbPromise).then(e=>{let t=[];e.forEach(e=>{e.reviews.forEach(e=>{e.flag&&(t.push(e),delete e.flag)})}),t.forEach(e=>{const t={restaurant_id:e.restaurant_id,name:e.name,rating:e.rating,comments:e.comments,updatedAt:e.updatedAt};fetch("http://localhost:1337/reviews/",{method:"post",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t)}).then(e=>console.log("new review has been synced to the server",e.json()))})})}}